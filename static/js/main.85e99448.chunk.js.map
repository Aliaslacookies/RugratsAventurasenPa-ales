{"version":3,"sources":["components/ScoreBoard.js","images/ima-01.png","images/ima-02.png","images/ima-03.png","images/ima-04.png","images/ima-05.png","images/ima-06.png","images/blank.png","App.js","index.js"],"names":["ScoreBoard","score","className","candyColors","Dilpickles","Filiberto","Kimi","TommyPickles","TommyPickles2","AnngelicaPickles","App","useState","currentColorArrangement","setCurrentColorArrangement","squareBeingDragged","setSquareBeingDragged","squareBeingReplaced","setSquareBeingReplaced","scoreDisplay","setScoreDisplay","checkForColumnOfFour","i","columnOfFour","width","decidedColor","isBlank","blank","every","square","forEach","checkForRowOfFour","rowOfFour","includes","checkForColumnOfThree","columnOfThree","checkForRowOfThree","rowOfThree","moveIntoSquareBelow","randomNumber","Math","floor","random","length","dragStart","e","target","dragDrop","dragEnd","squareBeingDraggedId","parseInt","getAttribute","squareBeingReplacedId","validMove","isAColumnOfFour","isARowOfFour","isAColumnOfThree","isARowOfThree","useEffect","randomColorArrangement","randomColor","push","createBoard","timer","setInterval","clearInterval","map","candyColor","index","src","alt","draggable","onDragStart","onDragOver","preventDefault","onDragEnter","onDragLeave","onDrop","onDragEnd","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.85e99448.chunk.js","sourcesContent":["const ScoreBoard = ({ score }) => {\r\n  return (\r\n    <div className=\"score-board\">\r\n      <h2>{score}</h2>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ScoreBoard","export default __webpack_public_path__ + \"static/media/ima-01.dd284a5d.png\";","export default __webpack_public_path__ + \"static/media/ima-02.4f5a8ab8.png\";","export default __webpack_public_path__ + \"static/media/ima-03.474aa586.png\";","export default __webpack_public_path__ + \"static/media/ima-04.83b26716.png\";","export default __webpack_public_path__ + \"static/media/ima-05.a2e46dcc.png\";","export default __webpack_public_path__ + \"static/media/ima-06.4235777f.png\";","export default __webpack_public_path__ + \"static/media/blank.fbcb9179.png\";","import {useEffect, useState} from 'react'\r\nimport ScoreBoard from './components/ScoreBoard'\r\nimport Dilpickles from './images/ima-01.png'\r\nimport Filiberto from './images/ima-02.png'\r\nimport Kimi from './images/ima-03.png'\r\nimport TommyPickles from './images/ima-04.png'\r\nimport TommyPickles2 from './images/ima-05.png'\r\nimport AnngelicaPickles from './images/ima-06.png'\r\nimport blank from './images/blank.png'\r\n\r\nconst width = 8\r\nconst candyColors = [\r\n    Dilpickles,\r\n    Filiberto,\r\n    Kimi,\r\n    TommyPickles,\r\n    TommyPickles2,\r\n    AnngelicaPickles\r\n]\r\n\r\nconst App = () => {\r\n    const [currentColorArrangement, setCurrentColorArrangement] = useState([])\r\n    const [squareBeingDragged, setSquareBeingDragged] = useState(null)\r\n    const [squareBeingReplaced, setSquareBeingReplaced] = useState(null)\r\n    const [scoreDisplay, setScoreDisplay] = useState(0)\r\n\r\n    const checkForColumnOfFour = () => {\r\n        for (let i = 0; i <= 39; i++) {\r\n            const columnOfFour = [i, i + width, i + width * 2, i + width * 3]\r\n            const decidedColor = currentColorArrangement[i]\r\n            const isBlank = currentColorArrangement[i] === blank\r\n\r\n            if (columnOfFour.every(square => currentColorArrangement[square] === decidedColor && !isBlank)) {\r\n                setScoreDisplay((score) => score + 4)\r\n                columnOfFour.forEach(square => currentColorArrangement[square] = blank)\r\n                return true\r\n            }\r\n        }\r\n    }\r\n\r\n    const checkForRowOfFour = () => {\r\n        for (let i = 0; i < 64; i++) {\r\n            const rowOfFour = [i, i + 1, i + 2, i + 3]\r\n            const decidedColor = currentColorArrangement[i]\r\n            const notValid = [5, 6, 7, 13, 14, 15, 21, 22, 23, 29, 30, 31, 37, 38, 39, 45, 46, 47, 53, 54, 55, 62, 63, 64]\r\n            const isBlank = currentColorArrangement[i] === blank\r\n\r\n            if (notValid.includes(i)) continue\r\n\r\n            if (rowOfFour.every(square => currentColorArrangement[square] === decidedColor && !isBlank)) {\r\n                setScoreDisplay((score) => score + 4)\r\n                rowOfFour.forEach(square => currentColorArrangement[square] = blank)\r\n                return true\r\n            }\r\n        }\r\n    }\r\n\r\n    const checkForColumnOfThree = () => {\r\n        for (let i = 0; i <= 47; i++) {\r\n            const columnOfThree = [i, i + width, i + width * 2]\r\n            const decidedColor = currentColorArrangement[i]\r\n            const isBlank = currentColorArrangement[i] === blank\r\n\r\n            if (columnOfThree.every(square => currentColorArrangement[square] === decidedColor && !isBlank)) {\r\n                setScoreDisplay((score) => score + 3)\r\n                columnOfThree.forEach(square => currentColorArrangement[square] = blank)\r\n                return true\r\n            }\r\n        }\r\n    }\r\n\r\n    const checkForRowOfThree = () => {\r\n        for (let i = 0; i < 64; i++) {\r\n            const rowOfThree = [i, i + 1, i + 2]\r\n            const decidedColor = currentColorArrangement[i]\r\n            const notValid = [6, 7, 14, 15, 22, 23, 30, 31, 38, 39, 46, 47, 54, 55, 63, 64]\r\n            const isBlank = currentColorArrangement[i] === blank\r\n\r\n            if (notValid.includes(i)) continue\r\n\r\n            if (rowOfThree.every(square => currentColorArrangement[square] === decidedColor && !isBlank)) {\r\n                setScoreDisplay((score) => score + 3)\r\n                rowOfThree.forEach(square => currentColorArrangement[square] = blank)\r\n                return true\r\n            }\r\n        }\r\n    }\r\n\r\n    const moveIntoSquareBelow = () => {\r\n        for (let i = 0; i <= 55; i++) {\r\n            const firstRow = [0, 1, 2, 3, 4, 5, 6, 7]\r\n            const isFirstRow = firstRow.includes(i)\r\n\r\n            if (isFirstRow && currentColorArrangement[i] === blank) {\r\n                let randomNumber = Math.floor(Math.random() * candyColors.length)\r\n                currentColorArrangement[i] = candyColors[randomNumber]\r\n            }\r\n\r\n            if ((currentColorArrangement[i + width]) === blank) {\r\n                currentColorArrangement[i + width] = currentColorArrangement[i]\r\n                currentColorArrangement[i] = blank\r\n            }\r\n        }\r\n    }\r\n\r\n    const dragStart = (e) => {\r\n        setSquareBeingDragged(e.target)\r\n    }\r\n    const dragDrop = (e) => {\r\n        setSquareBeingReplaced(e.target)\r\n    }\r\n    const dragEnd = () => {\r\n        const squareBeingDraggedId = parseInt(squareBeingDragged.getAttribute('data-id'))\r\n        const squareBeingReplacedId = parseInt(squareBeingReplaced.getAttribute('data-id'))\r\n\r\n        currentColorArrangement[squareBeingReplacedId] = squareBeingDragged.getAttribute('src')\r\n        currentColorArrangement[squareBeingDraggedId] = squareBeingReplaced.getAttribute('src')\r\n\r\n        const validMoves = [\r\n            squareBeingDraggedId - 1,\r\n            squareBeingDraggedId - width,\r\n            squareBeingDraggedId + 1,\r\n            squareBeingDraggedId + width\r\n        ]\r\n\r\n        const validMove = validMoves.includes(squareBeingReplacedId)\r\n\r\n        const isAColumnOfFour = checkForColumnOfFour()\r\n        const isARowOfFour = checkForRowOfFour()\r\n        const isAColumnOfThree = checkForColumnOfThree()\r\n        const isARowOfThree = checkForRowOfThree()\r\n\r\n        if (squareBeingReplacedId &&\r\n            validMove &&\r\n            (isARowOfThree || isARowOfFour || isAColumnOfFour || isAColumnOfThree)) {\r\n            setSquareBeingDragged(null)\r\n            setSquareBeingReplaced(null)\r\n        } else {\r\n            currentColorArrangement[squareBeingReplacedId] = squareBeingReplaced.getAttribute('src')\r\n            currentColorArrangement[squareBeingDraggedId] = squareBeingDragged.getAttribute('src')\r\n            setCurrentColorArrangement([...currentColorArrangement])\r\n        }\r\n    }\r\n\r\n\r\n    const createBoard = () => {\r\n        const randomColorArrangement = []\r\n        for (let i = 0; i < width * width; i++) {\r\n            const randomColor = candyColors[Math.floor(Math.random() * candyColors.length)]\r\n            randomColorArrangement.push(randomColor)\r\n        }\r\n        setCurrentColorArrangement(randomColorArrangement)\r\n    }\r\n\r\n    useEffect(() => {\r\n        createBoard()\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        const timer = setInterval(() => {\r\n            checkForColumnOfFour()\r\n            checkForRowOfFour()\r\n            checkForColumnOfThree()\r\n            checkForRowOfThree()\r\n            moveIntoSquareBelow()\r\n            setCurrentColorArrangement([...currentColorArrangement])\r\n        }, 100)\r\n        return () => clearInterval(timer)\r\n    }, [checkForColumnOfFour, checkForRowOfFour, checkForColumnOfThree, checkForRowOfThree, moveIntoSquareBelow, currentColorArrangement])\r\n\r\n\r\n    return (\r\n        <div className=\"app\">\r\n            <div className=\"game\">\r\n                {currentColorArrangement.map((candyColor, index) => (\r\n                    <img\r\n                        key={index}\r\n                        src={candyColor}\r\n                        alt={candyColor}\r\n                        data-id={index}\r\n                        draggable={true}\r\n                        onDragStart={dragStart}\r\n                        onDragOver={(e) => e.preventDefault()}\r\n                        onDragEnter={(e) => e.preventDefault()}\r\n                        onDragLeave={(e) => e.preventDefault()}\r\n                        onDrop={dragDrop}\r\n                        onDragEnd={dragEnd}\r\n                    />\r\n                ))}\r\n            </div>\r\n            <ScoreBoard score={scoreDisplay}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App\r\n\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport App from './App'\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n)"],"sourceRoot":""}